{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","Recipe","_ref","title","calories","image","ingredients","react_default","a","createElement","className","style","map","i","text","src","alt","App","console","log","_useState","useState","_useState2","Object","slicedToArray","counter","setCounter","_useState3","_useState4","recipes","setRecipes","_useState5","_useState6","search","setSearch","_useState7","_useState8","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","onClick","src_Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d17169d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__Jqq14\"};","import React from 'react';\r\n\r\nimport style from './recipe.module.css';\r\nconst Recipe=({title,calories,image,ingredients})=>{\r\n\r\n\r\nreturn(\r\n\r\n    <div className={style.recipe}>\r\n        <h1 >{title}</h1>\r\n        <ol>\r\n        {ingredients.map(i=>(\r\n            <li>{i.text}</li>\r\n\r\n        ))}\r\n\r\n        </ol>\r\n        <p>{calories}</p>\r\n        <img src={image} alt=''/>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n)\r\n\r\n}\r\nexport default Recipe;","import React from 'react';\nimport  { useState, useEffect } from 'react';\nimport Recipe from './Recipe';\n\nimport './App.css';\n\n\n  const APP_ID='7bbf5aca';\n  const APP_KEY='8f9cf07cb6964e07a622f55b8e032b84';\n  const App=()=>{\n    const examplereq= ``;\n\n  console.log(examplereq);\n  const [counter, setCounter]=useState(0);\n  const[recipes,setRecipes]=useState([]);\n  const [search,setSearch]=useState('');\n  const [query,setQuery]=useState('chicken')\n\n\n\n  useEffect(()=>{\n    console.log(\"effect has been run\")\n    getRecipes();\n  },[query])\n  //empty array -only once\n  //value- run only value changees\n  const getRecipes=async ()=>{\n\n    const response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=3&calories=591-722&health=alcohol-free`);\n    const data=await response.json()\n    //formatting response we can use using json method\nsetRecipes(data.hits);    \nconsole.log(data.hits)\n  }\n\n  const updateSearch=e=>{\n      setSearch(e.target.value);\n      console.log(search);\n\n  }\n  const getSearch=e=>{\n    e.preventDefault();\n    setQuery(search)\n    setSearch(\"\")\n\n  }\n\n\n  return(\n    <div className=\"App\">\n\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className='search-bar' type=\"text\" value={search} onChange={updateSearch}/>\n        <button\n          className=\"search-button\" type=\"submit\">search\n        </button>\n      <h1 onClick ={()=>setCounter(counter+1)}>{counter}</h1>\n        \n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe=>(\n        <Recipe \n        key={'yoyo'}\n        title={recipe.recipe.label} calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      \n      ))}\n\n      </div>\n      \n\n</div>\n  \n\n  )\n    \n\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}